package ChactingProgram;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ChatA_base extends JFrame implements ActionListener {
	JPanel p_north,p_south; // ï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ì³ï¿½
	JButton bt_call,bt_ms; // Ã¤ï¿½ï¿½Ä£ï¿½ï¿½ È£ï¿½ï¿½, ï¿½Þ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	JTextArea area; // ï¿½Ø½ï¿½Æ® ï¿½ï¿½ï¿½ï¿½
	JScrollPane scroll; // ï¿½ï¿½Å©ï¿½ï¿½
	JTextField t_input; // ï¿½Ø½ï¿½Æ®ï¿½Ô·ï¿½
	ChatB_base chatB;
	ChatC_base chatC;
	
	//ï¿½Ã°ï¿½Ç¥ï¿½ï¿½
	SimpleDateFormat format;
	Calendar cal;
	String time;
	String showTime ;
	int hour, min;

	
	public ChatA_base() {
		super("ChatA");
		p_north = new JPanel();
		bt_call = new JButton("Ä£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½");
		area = new JTextArea();
		scroll = new JScrollPane(area);
		p_south = new JPanel();
		t_input = new JTextField(15);
		bt_ms = new JButton("ï¿½ï¿½ï¿½ï¿½"); // ï¿½Þ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

		//ï¿½Ã°ï¿½Ç¥ï¿½ï¿½
		format = new SimpleDateFormat("a HH:mm");
		cal = Calendar.getInstance();
		hour = cal.get(cal.HOUR_OF_DAY);
		min = cal.get(cal.MINUTE);
		showTime = format.format(cal.getTime());
		
		// ï¿½ï¿½ï¿½ï¿½
		p_north.add(bt_call); // ï¿½ï¿½ï¿½ï¿½ï¿½Ð³ï¿½ ï¿½ï¿½Æ° ï¿½ï¿½ï¿½ï¿½
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Ê¿ï¿½ ï¿½Ð³Îºï¿½ï¿½ï¿½
		add(p_north, BorderLayout.NORTH);
		
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Å©ï¿½Ñºï¿½ï¿½ï¿½
		add(scroll);
		
		// ï¿½ï¿½ï¿½ï¿½ï¿½Ð³Î¿ï¿½ ï¿½Ø½ï¿½Æ®ï¿½Ô·ï¿½, ï¿½ï¿½Æ° ï¿½ï¿½ï¿½ï¿½
		p_south.add(t_input);
		p_south.add(bt_ms);
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Ê¿ï¿½ ï¿½Ð³ï¿½ ï¿½ï¿½ï¿½ï¿½
		add(p_south, BorderLayout.SOUTH);
		
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Å©ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½Ì°ï¿½.
		setBounds(100,100,300,400);//x,y,width,height
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		// ï¿½ï¿½Æ°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ä£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½!
		bt_call.addActionListener(this);
		
		// ï¿½Ø½ï¿½Æ® ï¿½Û¼ï¿½ ï¿½Ï°ï¿½ ï¿½ï¿½ï¿½Í´ï¿½ï¿½ï¿½ï¿½ï¿½ È­ï¿½é¿¡ ï¿½Û¾ï¿½ ï¿½Ã¸ï¿½ï¿½ï¿½.
		t_input.addKeyListener(new KeyListener() {
			@Override
			public void keyReleased(KeyEvent e) {
				int key = e.getKeyCode();
				if(key == KeyEvent.VK_ENTER) {
					if(t_input.getText().length()>0) {
						String msgA = t_input.getText();
						
						area.append(showTime+"A.user : "+msgA+"\n");
						if(chatB!=null) {
							chatB.area.append(showTime+"A.user : "+msgA+"\n");
						}
						if(chatC!=null) {
							chatC.area.append(showTime+"A.user : "+msgA+"\n");
						}

						t_input.setText("");
					}

				}
			}
			@Override
			public void keyTyped(KeyEvent e) {
			}
			@Override
			public void keyPressed(KeyEvent e) {
			}
		});
		
	}
	public void textA(String text) {
		area.append(text+"\n");
	}
	
	public void actionPerformed(ActionEvent e) {
		if(chatB==null) {
			chatB = new ChatB_base();
		}
		if(chatC==null) {
			chatC = new ChatC_base();
		}
		
		chatB.setChatA(this);
		chatB.setChatC(chatC);
		
		chatC.setChatA(this);
		chatC.setChatB(chatB);
	}

	public static void main(String[] args) {
		new ChatA_base();
	}

}
